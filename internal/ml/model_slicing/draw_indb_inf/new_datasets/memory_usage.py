import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# Sample data, replace this with your actual data
memory_log = {
    "with all opt": [[0.012600245, 18748], [1.043574622, 181904], [2.880909715, 439356], [4.746978433, 450032],
                     [6.580087388, 454812], [8.395959081, 461368], [10.229162885, 466332], [12.037321584, 470420],
                     [13.867830914, 479540], [15.682375319, 481492], [17.114590375, 489424], [18.88665319, 487128],
                     [20.715824796, 493432], [22.523327161, 498308], [24.340567323, 510192], [26.164078111, 509144],
                     [27.992991493, 510196], [29.810057809, 516004], [31.624005968, 529172], [33.433013773, 531936],
                     [35.25928479, 532344], [37.092092925, 538364], [38.102963907, 548744],
                     [39.924327023000004, 545516], [41.729301603, 550884], [43.540291392, 557808],
                     [45.347360579, 561724], [47.169496446, 556168], [49.011585526, 581232], [50.823214165, 574888],
                     [52.64347461, 573316], [54.447590065, 571784], [56.276114357, 578064], [57.283435147, 570924],
                     [59.12331606, 576356], [60.942781559, 577336], [62.764237568, 581372], [64.595277978, 575348],
                     [66.403776621, 574876], [68.20959977, 578288], [70.019599508, 574892], [71.859492037, 567136],
                     [73.663600443, 567480], [75.487515269, 576564], [77.133634976, 567664], [78.954270747, 578108],
                     [80.79577953, 577728], [82.635105627, 575796], [84.447651732, 571864], [86.268515464, 578308],
                     [88.083857798, 575500], [89.922615099, 567136], [91.729333261, 574744]],
    "skip slice_model()": [[0.042694868, 18528], [1.054480046, 180976], [2.869932923, 303848], [4.683334884, 309164],
                           [6.496423195, 317100], [8.303804408, 338020], [9.512667188, 339280], [11.334003168, 351248],
                           [13.149602165, 359480], [14.967301195, 371392], [16.775008038, 375576],
                           [18.609840614, 395792], [20.425202473, 403904], [22.232969018, 412080],
                           [24.03805168, 416152], [25.84236809, 431664], [27.717021297, 428512], [29.498214122, 426732],
                           [31.249602243, 438464], [33.063644976, 427312], [34.870353464, 428468],
                           [36.673594206, 423136], [38.497763786, 429512], [40.30969706, 428276],
                           [42.119186815, 422584], [43.96071582, 428696]],
    "skip py_call()": [[0.013663388, 18392], [1.06468474, 181900], [2.888457687, 306712], [4.702484589, 310076],
                       [6.519721856, 313248], [8.334676739, 316284], [10.150899278, 319388], [11.169898358, 321188],
                       [12.986340589, 324228], [14.801986161, 327724], [16.618872759, 330764], [18.435446563, 334016],
                       [20.254542971, 337080], [22.070983909, 340528], [23.885838568, 343628], [25.70309731, 346668],
                       [27.519016459, 349704], [29.33376864, 353312], [30.349787802, 355272], [32.166998903, 358312],
                       [33.98326466, 361412], [35.800453345, 364584], [37.622458615, 367948], [39.438729501, 370988],
                       [41.254825068, 374024], [43.064210938, 377468], [44.878140752, 381032], [46.695040223, 384180],
                       [48.509769723, 387452], [50.186044869, 390224], [51.942824853, 393324], [53.759152166, 396760],
                       [55.575132938, 399856], [57.391068069, 402956], [59.203813366, 405996], [61.017674341, 409492],
                       [62.834978673, 412532], [64.650972979, 415572], [66.467863848, 419484], [68.280809759, 422912],
                       [70.093299888, 426024], [71.112206924, 427936], [72.923324631, 430968], [74.742453828, 434008],
                       [76.559411976, 437444], [78.374309901, 437576], [80.190946252, 437576], [82.010548055, 437576],
                       [83.827111934, 437576], [85.652536731, 437576], [87.46527215, 437576], [89.278812285, 437620],
                       [90.292789922, 437620], [92.106202715, 437620], [93.923042217, 437620], [95.738955659, 437620],
                       [97.557896672, 437620], [99.375028029, 437620], [101.195133221, 437668], [103.009931689, 437668],
                       [104.827134661, 437668], [106.643221012, 437668], [108.458993454, 437668],
                       [110.19337237, 437668], [112.011055965, 437668], [113.826844894, 437668],
                       [115.643795069, 438068], [117.463263633, 438072], [119.279278146, 438072],
                       [121.095335815, 438072], [122.911795476, 438072], [124.727247168, 438072],
                       [126.547572468, 438072], [128.363305467, 438072], [130.174402026, 438072],
                       [131.990165816, 438072], [133.802519829, 438072], [135.617987576, 438072],
                       [137.434037169, 438072], [139.2541231, 438072], [141.066393428, 438072], [142.882864663, 438072],
                       [144.699071515, 438072], [146.515635869, 438072], [148.330568328, 438072],
                       [150.146641954, 438072], [151.165456818, 438072]],
    "del tensor input": []

    # "w/o state cache": [],
    # "w/o memory sharing": [
    #     [0.0144259, 20804], [1.030951876, 184876], [2.909390436, 314468], [4.738563242, 315680],
    #     [6.553871011, 317364], [8.392857958, 319112], [9.408757094, 320844], [11.25468476, 323972],
    #     [13.08372853, 326176], [14.921665195, 327536], [16.741873756, 329992], [18.577636054, 331960],
    #     [20.396168183, 334424]
    # ],
    # "w/o all opt": [
    #     [0.0144259, 20804], [1.030951876, 184876], [2.909390436, 314468], [4.738563242, 315680],
    #     [6.553871011, 317364], [8.392857958, 319112], [9.408757094, 320844], [11.25468476, 323972],
    #     [13.08372853, 326176], [14.921665195, 327536], [16.741873756, 329992], [18.577636054, 331960],
    #     [20.396168183, 334424]
    # ],
}


# Helper function for formatting the y-axis
def mb_formatter(x, pos):
    return '{:.1f} MB'.format(x)


# Set up the plot
fig, ax = plt.subplots(figsize=(10, 6))

# Define colors for different lines
colors = ['blue', 'green', 'red', 'purple']
# Define line styles for different lines
line_styles = ['-', '--', '-.', ':']

# Plot each configuration
for (label, data), color, line_style in zip(memory_log.items(), colors, line_styles):
    # Convert memory usage to MB
    timestamps = [x[0] for x in data]
    memory_usage = [x[1] / 1024 for x in data]  # Convert KB to MB

    ax.plot(timestamps, memory_usage, label=label, color=color, linestyle=line_style, marker='o', linewidth=2)

# Formatting the y-axis
ax.yaxis.set_major_formatter(FuncFormatter(mb_formatter))

# Adding labels and title
ax.set_xlabel('Time (s)', fontsize=14)
ax.set_ylabel('Memory Usage (MB)', fontsize=14)
ax.set_title('Memory Usage Over Time', fontsize=16)
ax.grid(True, linestyle='--', linewidth=0.5)

# Show legend
ax.legend()

# Display the plot
plt.tight_layout()
plt.show()
