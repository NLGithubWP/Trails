import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# Sample data, replace this with your actual data
# memory_log = {
#     "with all opt": [[0.012600245, 18748], [1.043574622, 181904], [2.880909715, 439356], [4.746978433, 450032],
#                      [6.580087388, 454812], [8.395959081, 461368], [10.229162885, 466332], [12.037321584, 470420],
#                      [13.867830914, 479540], [15.682375319, 481492], [17.114590375, 489424], [18.88665319, 487128],
#                      [20.715824796, 493432], [22.523327161, 498308], [24.340567323, 510192], [26.164078111, 509144],
#                      [27.992991493, 510196], [29.810057809, 516004], [31.624005968, 529172], [33.433013773, 531936],
#                      [35.25928479, 532344], [37.092092925, 538364], [38.102963907, 548744],
#                      [39.924327023000004, 545516], [41.729301603, 550884], [43.540291392, 557808],
#                      [45.347360579, 561724], [47.169496446, 556168], [49.011585526, 581232], [50.823214165, 574888],
#                      [52.64347461, 573316], [54.447590065, 571784], [56.276114357, 578064], [57.283435147, 570924],
#                      [59.12331606, 576356], [60.942781559, 577336], [62.764237568, 581372], [64.595277978, 575348],
#                      [66.403776621, 574876], [68.20959977, 578288], [70.019599508, 574892], [71.859492037, 567136],
#                      [73.663600443, 567480], [75.487515269, 576564], [77.133634976, 567664], [78.954270747, 578108],
#                      [80.79577953, 577728], [82.635105627, 575796], [84.447651732, 571864], [86.268515464, 578308],
#                      [88.083857798, 575500], [89.922615099, 567136], [91.729333261, 574744]],
#     "skip slice_model()": [[0.042694868, 18528], [1.054480046, 180976], [2.869932923, 303848], [4.683334884, 309164],
#                            [6.496423195, 317100], [8.303804408, 338020], [9.512667188, 339280], [11.334003168, 351248],
#                            [13.149602165, 359480], [14.967301195, 371392], [16.775008038, 375576],
#                            [18.609840614, 395792], [20.425202473, 403904], [22.232969018, 412080],
#                            [24.03805168, 416152], [25.84236809, 431664], [27.717021297, 428512], [29.498214122, 426732],
#                            [31.249602243, 438464], [33.063644976, 427312], [34.870353464, 428468],
#                            [36.673594206, 423136], [38.497763786, 429512], [40.30969706, 428276],
#                            [42.119186815, 422584], [43.96071582, 428696]],
#     "skip py_call()": [[0.037487731, 18596], [1.049279797, 183072], [2.874304285, 307504], [4.691098214, 310540],
#                        [6.506874205, 313776], [8.323560725, 317032], [10.141980121, 320264], [11.159410321, 322108],
#                        [12.975202068, 325320], [14.791966966, 328416], [16.605266190000002, 331584],
#                        [18.427664584, 334884], [20.245025925, 338292], [22.058351874, 341388], [23.890465751, 344692],
#                        [25.705545216, 347916], [27.522452603, 351332], [29.333310017, 354484], [30.352157345, 356332],
#                        [32.166749406, 360272], [33.982633515, 363588], [35.798760843, 366808], [37.614703567, 369848],
#                        [39.43130915, 373356], [41.247204044, 376604], [43.061635834, 379644], [44.878014548, 382916],
#                        [46.693206224, 385960], [48.511253715, 389324], [50.304198335, 392496], [52.118861656, 395536],
#                        [53.936806313, 398620], [55.75111513, 401740], [57.565047381, 405112], [59.38717689, 408284],
#                        [61.202498465, 411316], [63.022486377, 414684], [64.836342967, 417852], [66.646825683, 420692],
#                        [68.458628796, 423728], [70.271319163, 426908], [71.286288318, 428624], [73.101626735, 431592],
#                        [74.919554886, 434632], [76.740418829, 437672], [78.558534728, 438784], [80.373493686, 438784],
#                        [82.196832336, 438832], [84.009351503, 438832], [85.830947725, 438832], [87.646467389, 438832],
#                        [89.461031784, 438832], [90.479992122, 438832], [92.294620107, 438832], [94.111099799, 438832],
#                        [95.927230684, 438832], [97.746362444, 438832], [99.563158397, 438832], [101.383019042, 438832],
#                        [103.202695871, 438832], [105.017722804, 438832], [106.834484135, 438832],
#                        [108.647513243, 438832], [110.301242856, 438832], [112.118349192, 438832],
#                        [113.932724093, 438832], [115.74753262, 438832], [117.562538053, 438832],
#                        [119.379353309, 438832], [121.195222711, 438832], [123.010560053, 438832],
#                        [124.827020238, 438832], [126.642775797, 438832], [128.459480247, 438832],
#                        [130.281429911, 438832], [132.097044741, 438860], [133.912049601, 438864],
#                        [135.730862672, 438864], [137.54748466, 438864], [139.367069797, 438864],
#                        [141.180923526, 438864], [142.998003973, 438864], [144.813620774, 438864],
#                        [146.630798922, 438864], [148.451205105, 438864], [150.266960215, 438864],
#                        [151.284242509, 438868], [153.097853193, 438868]],
#     "del tensor input": [[0.054385368, 18624], [1.067849517, 185616], [2.901614011, 438320], [3.917688274, 436544],
#                          [5.736061766, 445896], [7.548737215, 378156], [9.366380075, 457636], [11.24744956, 463812],
#                          [13.052007021, 468808], [14.874246281, 385128], [16.732588026, 479272], [18.561360171, 485716],
#                          [20.398859579, 488532], [22.204423505, 404036], [23.793341643, 496076], [25.612309963, 446308],
#                          [27.444747921, 416448], [29.254008026, 513644], [31.088803812, 428000], [32.902038096, 521348],
#                          [34.717332123, 523908], [36.555603846, 470384], [38.365823787, 535356], [40.175110609, 538456],
#                          [42.027637158, 546492], [43.790587946, 551372], [45.556554618, 545584], [47.376132303, 559660],
#                          [49.202024759, 520548], [51.01185505, 568720], [52.823131681, 575540], [54.631675351, 566048],
#                          [56.442919021, 575484], [58.288686412, 572360], [60.100066386, 570704], [61.922948475, 567112],
#                          [63.734473112, 567968], [64.741727769, 566108], [66.578540643, 576664], [68.40184616, 574012],
#                          [70.227813142, 568888], [72.053873509, 566012], [73.872927372, 567696], [75.732145544, 565956],
#                          [77.55978126, 570304], [79.381456961, 563472], [81.195234408, 568084], [83.033166813, 563724],
#                          [84.041605986, 566292], [85.888401306, 565200], [87.735611201, 575888], [89.545348051, 572496],
#                          [91.380171848, 567764], [93.21085096, 567968], [95.031529793, 569912], [96.852397771, 564044]]
#
#     # "w/o state cache": [],
#     # "w/o memory sharing": [
#     #     [0.0144259, 20804], [1.030951876, 184876], [2.909390436, 314468], [4.738563242, 315680],
#     #     [6.553871011, 317364], [8.392857958, 319112], [9.408757094, 320844], [11.25468476, 323972],
#     #     [13.08372853, 326176], [14.921665195, 327536], [16.741873756, 329992], [18.577636054, 331960],
#     #     [20.396168183, 334424]
#     # ],
#     # "w/o all opt": [
#     #     [0.0144259, 20804], [1.030951876, 184876], [2.909390436, 314468], [4.738563242, 315680],
#     #     [6.553871011, 317364], [8.392857958, 319112], [9.408757094, 320844], [11.25468476, 323972],
#     #     [13.08372853, 326176], [14.921665195, 327536], [16.741873756, 329992], [18.577636054, 331960],
#     #     [20.396168183, 334424]
#     # ],
# }

memory_log = {
    "with all opt": []
}


# Helper function for formatting the y-axis
def mb_formatter(x, pos):
    return '{:.1f} MB'.format(x)


# Set up the plot
fig, ax = plt.subplots(figsize=(10, 6))

# Define colors for different lines
colors = ['blue', 'green', 'red', 'purple']
# Define line styles for different lines
line_styles = ['-', '--', '-.', ':']

# Plot each configuration
for (label, data), color, line_style in zip(memory_log.items(), colors, line_styles):
    # Convert memory usage to MB
    timestamps = [x[1] for x in data]
    memory_usage = [x[2] / 1024 for x in data]  # Convert KB to MB

    # Plot monitoring points
    monitoring_timestamps = [x[1] for x in data]
    monitoring_memory_usage = [x[2] / 1024 for x in data]
    ax.plot(monitoring_timestamps, monitoring_memory_usage, label=label, color=color, linestyle=line_style, marker='o')

    # # Plot "After batch" points
    # batch_timestamps = [x[1] for x in data if x[0].startswith("After batch")]
    # batch_memory_usage = [x[2] / 1024 for x in data if x[0].startswith("After batch")]
    # ax.scatter(batch_timestamps, batch_memory_usage, color=color, s=100, edgecolors='black', zorder=5)

# Formatting the y-axis
ax.yaxis.set_major_formatter(FuncFormatter(mb_formatter))

# Adding labels and title
ax.set_xlabel('Time (s)', fontsize=14)
ax.set_ylabel('Memory Usage (MB)', fontsize=14)
ax.set_title('Memory Usage Over Time', fontsize=16)
ax.grid(True, linestyle='--', linewidth=0.5)

# Show legend
ax.legend()

# Display the plot
plt.tight_layout()
# plt.show()

# Save the plot
print(f"saving to ./internal/ml/model_slicing/exp_imgs/micro_memory.pdf")
fig.savefig(f"./internal/ml/model_slicing/exp_imgs/micro_memory.pdf", bbox_inches='tight')
