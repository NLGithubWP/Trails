import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# Sample data, replace this with your actual data
memory_log = {
    "with all opt": [[0.057226792, 21520], [0.168354354, 40288], [0.278871578, 71668], [0.391962261, 92836],
                     [0.504986643, 142356], [0.620575279, 151848], [0.731317877, 163816], [0.847245353, 170060],
                     [0.964698483, 177664], [1.079865431, 190792], [1.19566731, 205576], [1.313065528, 220888],
                     [1.428261703, 235672], [1.5454578429999999, 239104], [1.662449608, 239104], [1.778817325, 239104],
                     [1.8952996739999999, 239104], [2.012742491, 239104], [2.130197753, 239104], [2.245314037, 302004],
                     [2.363697477, 307100], [2.4778704080000002, 434192], [2.591721628, 439980], [2.70340673, 446684],
                     [2.814598269, 446396], [2.926803049, 445976], [3.043728796, 445708], [3.159088494, 445564],
                     [3.272810949, 444472], [3.387551639, 449836], [3.499405269, 449388], [3.613688169, 431568],
                     [3.725485204, 446856], [3.839683144, 449960], [3.951184012, 451364], [4.059127903, 450916],
                     [4.173360829, 450468], [4.286564653, 450020], [4.398833799, 449824], [4.5098471060000005, 448676],
                     [4.617361133, 448232], [4.725867134, 447784], [4.839048789, 447336], [4.950245284, 448968],
                     [5.062318817, 450272], [5.173360244, 449376], [5.287406821, 450992], [5.394715351, 452732],
                     [5.50671012, 454528], [5.618676336, 459856], [5.725381256, 459252], [5.833204851, 459508],
                     [5.944167119, 459692], [6.053030593, 459952], [6.164623376, 460848], [6.277447245, 460860],
                     [6.390045778, 460976], [6.497833123, 460596], [6.609376238, 460980], [6.718848461, 460916],
                     [6.831567014, 461040], [6.941260865, 461360], [7.050254373, 462520], [7.158080548, 462136],
                     [7.270051394, 461944], [7.380773114, 462008], [7.492267134, 462008], [7.604662042, 462904],
                     [7.714488587, 464336], [7.82706257, 463900], [7.93516573, 463452], [8.047417135, 463060],
                     [8.159641721, 462796], [8.271023158, 463584], [8.378650894, 463044], [8.48548704, 463868],
                     [8.593741435, 463420], [8.731723738, 464124], [8.849161825, 463676], [8.963378613, 464316],
                     [9.071322697, 465660], [9.185834765, 466360], [9.297134776, 465660], [9.411188853, 466880],
                     [9.526255266, 471368], [9.641001919, 471368], [9.750019882, 470764], [9.857240603, 471020],
                     [9.965816756, 471256], [10.073552882, 471532], [10.185826666, 472744], [10.299310551, 472748],
                     [10.4145763, 472816], [10.529399276, 472608], [10.63746939, 472416], [10.74624325, 472688],
                     [10.854655701, 472144], [10.968396851, 473616], [11.078676905, 472468], [11.189233512, 474432],
                     [11.300443338000001, 473492], [11.412905192, 473428], [11.525580222, 473236],
                     [11.633170816, 472984]],
    # "w/o state cache": [],
    # "w/o memory sharing": [
    #     [0.0144259, 20804], [1.030951876, 184876], [2.909390436, 314468], [4.738563242, 315680],
    #     [6.553871011, 317364], [8.392857958, 319112], [9.408757094, 320844], [11.25468476, 323972],
    #     [13.08372853, 326176], [14.921665195, 327536], [16.741873756, 329992], [18.577636054, 331960],
    #     [20.396168183, 334424]
    # ],
    # "w/o all opt": [
    #     [0.0144259, 20804], [1.030951876, 184876], [2.909390436, 314468], [4.738563242, 315680],
    #     [6.553871011, 317364], [8.392857958, 319112], [9.408757094, 320844], [11.25468476, 323972],
    #     [13.08372853, 326176], [14.921665195, 327536], [16.741873756, 329992], [18.577636054, 331960],
    #     [20.396168183, 334424]
    # ],
}


# Helper function for formatting the y-axis
def mb_formatter(x, pos):
    return '{:.1f} MB'.format(x)


# Set up the plot
fig, ax = plt.subplots(figsize=(10, 6))

# Define colors for different lines
colors = ['blue', 'green', 'red', 'purple']
# Define line styles for different lines
line_styles = ['-', '--', '-.', ':']

# Plot each configuration
for (label, data), color, line_style in zip(memory_log.items(), colors, line_styles):
    # Convert memory usage to MB
    timestamps = [x[0] for x in data]
    memory_usage = [x[1] / 1024 for x in data]  # Convert KB to MB

    ax.plot(timestamps, memory_usage, label=label, color=color, linestyle=line_style, marker='o', linewidth=2)

# Formatting the y-axis
ax.yaxis.set_major_formatter(FuncFormatter(mb_formatter))

# Adding labels and title
ax.set_xlabel('Time (s)', fontsize=14)
ax.set_ylabel('Memory Usage (MB)', fontsize=14)
ax.set_title('Memory Usage Over Time', fontsize=16)
ax.grid(True, linestyle='--', linewidth=0.5)

# Show legend
ax.legend()

# Display the plot
plt.tight_layout()
plt.show()
